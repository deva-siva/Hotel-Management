package Alpha;
import java.io.*;
import java.util.*;

class Reservation { 
    static int counter = 1000;
    int id;
    String name, category, checkIn, checkOut;

    Reservation(String name, String category, String checkIn, String checkOut) {
        this.id = ++counter;
        this.name = name;
        this.category = category;
        this.checkIn = checkIn;
        this.checkOut = checkOut;
    }

    @Override
    public String toString() {
        return id + "," + name + "," + category + "," + checkIn + "," + checkOut;
    }
}

public class HotelReservation {
    static List<Reservation> reservations = new ArrayList<>();
    static final String FILE = "reservations.txt";

    public static void main(String[] args) {
        loadFromFile();
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("1. Book Room\n2. Cancel Reservation\n3. View Bookings\n4. Exit");
            System.out.print("Choose: ");
            switch (sc.nextInt()) {
                case 1 -> bookRoom(sc);
                case 2 -> cancel(sc);
                case 3 -> viewBookings();
                case 4 -> { saveToFile(); return; }
                default -> System.out.println("Invalid choice.");
            }
        }
    }

    static void bookRoom(Scanner sc) {
          sc.nextLine(); 
        System.out.print("Name: ");
        String name = sc.nextLine();
        System.out.print("Room Category (Standard/Deluxe/Suite): ");
        String cat = sc.nextLine();
        System.out.print("Check-in (YYYY-MM-DD): ");
        String in = sc.nextLine();
        System.out.print("Check-out (YYYY-MM-DD): ");
        String out = sc.nextLine();
        System.out.print("Enter card number (simulated): ");
        sc.nextLine(); 

        Reservation r = new Reservation(name, cat, in, out);
        reservations.add(r);
        System.out.println("✅ Booked! Your ID: " + r.id);
    }

    static void cancel(Scanner sc) {
        System.out.print("Enter booking ID: ");
        int id = sc.nextInt();
        reservations.removeIf(r -> r.id == id);
        System.out.println("✅ Reservation cancelled (if it existed).");
    }

    static void viewBookings() {
        if (reservations.isEmpty()) System.out.println("No bookings.");
        else for (Reservation r : reservations)
            System.out.println("ID: " + r.id + ", " + r.name + ", " + r.category + ", " + r.checkIn + " to " + r.checkOut);
    }

    static void saveToFile() {
        try (PrintWriter pw = new PrintWriter(FILE)) {
            for (Reservation r : reservations) pw.println(r);
        } catch (IOException e) {
            System.out.println("Error saving file.");
        }
    }

    static void loadFromFile() {
        File file = new File(FILE);
        if (!file.exists()) return;
        try (BufferedReader br = new BufferedReader(new FileReader(FILE))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] d = line.split(",");
                Reservation r = new Reservation(d[1], d[2], d[3], d[4]);
                r.id = Integer.parseInt(d[0]);
                Reservation.counter = Math.max(Reservation.counter, r.id);
                reservations.add(r);
            }
        } catch (IOException e) {
            System.out.println("Error loading file.");
        }
    }
}
